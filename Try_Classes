class Port:
  def __init__(self, type, year_of_foundation, country, status, season):
    """
    Объект "Порт"
    :param type: тип порта
    :param year_of_foundation: год основания
    :param country: страна
    :param status: статус
    :param season: сезон использования
    
    self.type = type
    self.year_of_foundation = year_of_foundation
    self.country = country
    self.status = status
    self.season = season
  
  def is_non_freezing(self) -> bool:
    """
    Функция, которая проеверяет является ли определенный порт незамерзающим
    
    :return: является ли порт незамерзающим?
    """
    ...
    
  def select_seaports(self) -> str:
    """
    Функция, которая выбирает из списка все морские порты
    
    :return: морские порты:
    """
    ...
  
  def number_of_river_ports(self, year) -> int
    """
    Функция, которая определяет количество речных портов в заданном году
    
    :param year: заданный год
    :return: количество портов
    """
    ...
    
class Coffee_drink:
  def __init__(self, stregth, acid, amount_of_milk, type_of_syrup)
     """
    Объект "Кофейный напиток"
    :param stregth: крепость
    :param acid: кислотность
    :param amount_of_milk: количество молока
    :param type_of_syrup: тип сиропа
    
    self.stregth = stregth
    self.acid = acid
    self.amount_of_milk = amount_of_milk
    self.type_of_syrup = type_of_syrup
    
  def low_acidity(self) -> str:
    """
    Функция, которая находит кофейные напитки с низкой кислотностью
    
    :return: кофейные напитки с низкой кислотностью
    """
    ...
    
   def adding_milk(self, milk) -> str:
    """
    Функция, которая находит кофейные напитки с определенным кол-вом молока
    
    :param milk: кол-во молока
    :return: кофейные напитки с заданным кол-вом молока
    """
    ...
    
     def coffee_limit(self, amount_of_strength) -> int:
    """
    Функция, которая определяет кол-во чашек кофейного напитка, которые можно употребить в день в зависимости от выбранной крепости кофе
    
    :param amount_of_strength: кол-во единиц крепости кофейного напитка
    :return: кол-во чашек в день
    """
    ...
    
    class Meteorite:
  def __init__(self, weight, type, name, rate_of_fall, chemical_content):
    """
    Объект "Метеорит"
    :param weight: масса
    :param type: тип
    :param name: имя
    :param rate_of_fall: скорость падения
    :param chemical_content: химический состав
    
    self.weight = weight
    self.type = type
    self.name = name
    self.rate_of_fall = rate_of_fall
    self.chemical_content = chemical_content
    
   def list_of_named(self) -> str:
    """
    Функция, которая выдаёт список только тех метеоритов, которые имеют имя
    
    :return: метеориты с именем:
    """
    ...
    
   def probability_of_catastrophe(self) -> float:
    """
    Функция, которая считает вероятность падения метеорита на Землю
   
    :return: вероятность падения на Землю =
    """
    ...
    
   def group_of_meteorite(self) -> str:
    """
    Функция, которая определяет группу метеорита в соответствии с химическим составом
   
    :return: группа метеорита
    """
    ...
    
